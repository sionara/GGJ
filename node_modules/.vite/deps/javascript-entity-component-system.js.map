{
  "version": 3,
  "sources": ["../../javascript-entity-component-system/dist/src/index.ts"],
  "sourcesContent": ["export type Component = {\r\n  name     : string\r\n  state    : {\r\n    [key: string]: any\r\n  }\r\n  onAttach?: Function\r\n}\r\n\r\nexport type Processor = {\r\n  name    : string\r\n  required: string[]\r\n  update(entity: Entity, components: Component[], processor: Processor): void\r\n}\r\n\r\nexport type Entity = {\r\n  name      : string\r\n  components: Component[]\r\n  processors: Processor[]\r\n}\r\n\r\n/**\r\n * The Entity Component System class.\r\n */\r\nexport class EntityComponentSystem {\r\n  /**\r\n   * All registered components\r\n   * @defaultValue []\r\n   */\r\n  components: Component[]\r\n\r\n  /**\r\n   * All registered processors\r\n   * @defaultValue []\r\n   */\r\n  processors: Processor[]\r\n\r\n  /**\r\n   * All registered entities\r\n   * @defaultValue []\r\n   */\r\n  entities: Entity[]\r\n\r\n  constructor() {\r\n    this.components = []\r\n    this.processors = []\r\n    this.entities   = []\r\n  }\r\n\r\n  /**\r\n   * Gets all registered processors.\r\n   * @returns All registered processors in an array.\r\n   */\r\n  getProcessors(): Processor[] {\r\n    return this.processors\r\n  }\r\n\r\n  /**\r\n   * Gets all components processors.\r\n   * @returns All registered components in an array.\r\n   */\r\n  getComponents(): Component[] {\r\n    return this.components\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities.\r\n   * @returns All registered entities in an array.\r\n   */\r\n  getEntities(): Entity[] {\r\n    return this.entities\r\n  }\r\n\r\n  /**\r\n   * Gets a registered processor by name.\r\n   * @param name - Name of the processor\r\n   * @returns A processor or throws an error.\r\n   */\r\n  getProcessor(name: string): Processor {\r\n    const hasProcessor = this.hasProcessor(name)\r\n\r\n    if (!hasProcessor) {\r\n      throw new Error(`getProcessor(): processor \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.processors.find((processor) => processor.name === name) as Processor\r\n  }\r\n\r\n  /**\r\n   * Gets a registered component by name.\r\n   * @param name - Name of the component\r\n   * @returns A component or throws an error.\r\n   */\r\n  getComponent(name: string): Component {\r\n    const hasComponent = this.hasComponent(name)\r\n\r\n    if (!hasComponent) {\r\n      throw new Error(`getComponent(): component \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.components.find((component) => component.name === name) as Component\r\n  }\r\n\r\n  /**\r\n   * Gets a registered entity by name.\r\n   * @param name -Name of the entity\r\n   * @returns A entity or throws an error. \r\n   */\r\n  getEntity(name: string): Entity {\r\n    const hasEntity = this.hasEntity(name)\r\n\r\n    if (!hasEntity) {\r\n      throw new Error(`getEntity(): entity \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.entities.find((entity) => entity.name === name) as Entity\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities that match the given name.\r\n   * @param name -Name of the entity\r\n   * @returns An array of entities or an empty array.\r\n   */\r\n  getEntitiesByName(name: string): Entity[] {\r\n    const entities = []\r\n    const length   = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const currentEntity = this.entities[i]\r\n\r\n      if (currentEntity.name === name) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n    \r\n    return entities\r\n  }\r\n\r\n  getEntityComponents(entity: Entity, components: string[]): Component[] {\r\n    const foundComponents = []\r\n    const length          = entity.components.length\r\n\r\n    for (let currentComponent of components) {\r\n      for (let i = 0; i < length; i++) {\r\n        const currentEntityComponent = entity.components[i]\r\n\r\n        if (currentEntityComponent.name === currentComponent) {\r\n          foundComponents.push(currentEntityComponent)\r\n        }\r\n      }\r\n    }\r\n\r\n    return foundComponents\r\n  }\r\n\r\n  /**\r\n   * Checks if processor is registered by name.\r\n   * @param name - Name of the processor\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasProcessor(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let processor of this.processors) {\r\n      if (processor.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if component is registered.\r\n   * @param name - Name of the component\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasComponent(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let component of this.components) {\r\n      if (component.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if entity is registered.\r\n   * @param name - Name of the entity\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasEntity(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let entity of this.entities) {\r\n      if (entity.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Composes a entity with given components.\r\n   * @param name - Name of the entity\r\n   * @param components - An array of component names\r\n   * @param processors - An array of processor names\r\n   * @returns The composed entity or throws an error.\r\n   */\r\n  createEntity(name: string, components: string[], processors: string[]): Entity {\r\n    const entityName = name\r\n    const allComponents = []\r\n    const allProcessors = []\r\n\r\n    components.forEach(componentName => {\r\n      const foundComponent = this.getComponent(componentName)\r\n      const copy           = JSON.parse(JSON.stringify(foundComponent))\r\n\r\n      if (copy.onAttach) {\r\n        foundComponent.onAttach()\r\n      }\r\n\r\n      allComponents.push(copy)\r\n    })\r\n\r\n    processors.forEach(processorName => {\r\n      const foundProcessor = this.getProcessor(processorName)\r\n\r\n      allProcessors.push(foundProcessor)\r\n    })\r\n\r\n    return {\r\n      name: entityName,\r\n      components: allComponents,\r\n      processors: allProcessors\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target component.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns true if entity has the component or false if not\r\n   */\r\n  entityHasComponent(entity: Entity, component: string): boolean {\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target processor.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns true if entity has the processor or false if not\r\n   */\r\n  entityHasProcessor(entity: Entity, processor: string): boolean {\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Removes a component from an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation successful or throw an error.\r\n   */\r\n  removeComponentFromEntity(entity: Entity, component: string): void {\r\n    if (!this.entityHasComponent(entity, component)) {\r\n      throw new Error(`removeComponentFromEntity(): component ${component} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.components.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Removes processor from an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation successful or throws an error.\r\n   */\r\n  removeProcessorFromEntity(entity: Entity, processor: string): void {\r\n    if (!this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`removeProcessorFromEntity(): Processor ${processor} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.processors.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addComponentToEntity(entity: Entity, component: string): void {\r\n    if (this.entityHasComponent(entity, component)) {\r\n      throw new Error(`addComponentToEntity(): Can't add component ${component} - this entity already has this component.`)\r\n    }\r\n\r\n    if (!this.hasComponent(component)) {\r\n      throw new Error(`addComponentToEntity(): You can't add component ${component} to entity ${entity.name}, because the component is not registered.`)\r\n    }\r\n\r\n    entity.components.push(this.getComponent(component))\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addProcessorToEntity(entity: Entity, processor: string): void {\r\n    if (this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`addProcessorToEntity(): Can't add processor ${processor} - this entity already this processor.`)\r\n    }\r\n\r\n    if (!this.hasProcessor(processor)) {\r\n      throw new Error(`addProcessorToEntity(): You can't add processor ${processor} to entity ${entity.name}, because the processor is not registerd.`)\r\n    }\r\n\r\n    entity.processors.push(this.getProcessor(processor))\r\n  }\r\n\r\n  /**\r\n   * Adds a entity to the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful\r\n   */\r\n  addEntity(entity: Entity): void {\r\n    this.entities.push(entity)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to the system.\r\n   * @param component - component object\r\n   * @returns Void if successful\r\n   */\r\n  addComponent(component: Component): void {\r\n    const passedComponent = component as Component\r\n\r\n    if (passedComponent.onAttach) {\r\n      passedComponent.onAttach()\r\n    }\r\n\r\n    this.components.push(passedComponent)\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to the system.\r\n   * @param processor - processor object\r\n   * @returns Void if successful\r\n   */\r\n  addProcessor(processor: Processor): void {\r\n    this.processors.push(processor)\r\n  }\r\n\r\n  /**\r\n   * Removes an entity from the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful or throws an error.\r\n   */\r\n  removeEntity(entity: Entity): void {\r\n    const length = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (this.entities[i] === entity) {\r\n        this.entities.splice(i, 1)\r\n        return\r\n      }\r\n    }\r\n\r\n    throw new Error(`removeEntity(): entity \"${entity.name}\" not found.`)\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes all entities from the system.\r\n   * @returns void\r\n   */\r\n  removeAllEntities(): void {\r\n    this.entities = []\r\n  }\r\n\r\n  /**\r\n   * Gets all entities that have the target component registered.\r\n   * @param componentName - Name of the component\r\n   * @returns All entities in an array.\r\n   */\r\n  private getEntitiesFromRequiredComponents(components: string[]): Entity[] {\r\n    const entities = []\r\n    let entitiesAmount = this.entities.length\r\n\r\n    for (let i = 0; i < entitiesAmount; i++) {\r\n      const currentEntity = this.entities[i]\r\n      let hasAllComponents = true\r\n\r\n      for (let j = 0; j < components.length; j++) {\r\n        const currentComponent = components[j]\r\n        \r\n        if (!this.entityHasComponent(currentEntity, currentComponent)) {\r\n          hasAllComponents = false\r\n          break\r\n        }\r\n      }\r\n\r\n      if (hasAllComponents) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n\r\n    return entities\r\n  }\r\n\r\n\r\n  /**\r\n   * Runs all processors for it's corresponding components e.g. run the prcoessors update function.\r\n   * @returns Void if successful\r\n   */\r\n  private runProcessors(): void {\r\n    this.processors.forEach(processor => {\r\n      const entities     = this.getEntitiesFromRequiredComponents(processor.required)\r\n      const entityAmount = entities.length\r\n\r\n      for (let i = 0; i < entityAmount; i++) {\r\n        const currentEntity = entities[i]\r\n        const hasProcessor  = this.entityHasProcessor(currentEntity, processor.name)\r\n\r\n        if (hasProcessor) {\r\n          const components = this.getEntityComponents(currentEntity, processor.required)\r\n          processor.update(currentEntity, components, processor)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs all processors. This should be done per frame e.g. inside your gameloop.\r\n   * @returns Void if successful\r\n   */\r\n  update(): void {\r\n    this.runProcessors()\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
